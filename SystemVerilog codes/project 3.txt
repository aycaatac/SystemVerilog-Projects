module decoder2_4(i0, i1, m0, m1, m2, m3);
input i0, i1;
output m0, m1, m2, m3;
reg m0, m1, m2, m3;

always @(i0, i1)
begin
m0 <= ~i0&~i1;
m1 <= ~i0&i1;
m2 <= i0&~i1;
m3 <= i0&i1;
end
endmodule

module mux2_1(A, B, s1, result);
input A, B, s1;
output reg result;

always @(A, B, s1)
begin
if(s1==0)
result <= A;
if(s1==1)
result <= B;
end
endmodule

module mux4_1(A, B, C, D, s1, s2, result);
input A, B, C, D, s1, s2;
output result;
wire w1, w2;

mux2_1 m1(A, C, s1, w1);
mux2_1 m2(B, D, s1, w2);
mux2_1 m3(w1, w2, s2, result);
endmodule

module mux8_1(D, E, F, G, K, L, M, N, s1, s2, s3, result);
input D, E, F, G, K, L, M, N, s1, s2, s3;
output result;
wire w1, w2, w3, w4;

mux4_1 m1(D, F, K, M, s1, s2, w1);
mux4_1 m2(E, G, L, N, s1, s2, w2);
and a1(w3, ~s3, w1);
and a2(w4, s3, w2);
or o1(result, w3, w4);
endmodule

module option_f(A, B, s1, s2, s3, result);
input A, B, s1, s2, s3;
output result;
wire w1, w2, w3, w4;

decoder2_4 d1(A, B, w1, w2, w3, w4);
mux8_1 m1(w4, w2, 1, B, w1, ~A, 0, w3, s1, s2, s3, result);
endmodule

module basysDecoder2_4(input sw[1:0], output reg led[3:0]);

always @(sw[0], sw[1])
begin
led[0] <= ~sw[0]&~sw[1];
led[1] <= ~sw[0]&sw[1];
led[2] <= sw[0]&~sw[1];
led[3] <= sw[0]&sw[1];
end
endmodule

module basysOption_f(input sw[4:0], output led[0:0]);
wire w1, w2, w3, w4, w5;

decoder2_4 d1(sw[0], sw[1], w1, w2, w3, w4);
mux8_1 m1(w4, w2, 1, sw[1], w1, ~sw[0], 0, w3, sw[2], sw[3], sw[4], w5);
assign led[0] = w5;
endmodule


module mux4_1_tb();
reg A, B, C, D, s1, s2;
wire result;

mux4_1 muxtest(A, B, C, D, s1, s2, result);
initial begin 
A = 0; B = 0; C = 0; D = 0; s1 = 0; s2 = 0; #10;
A = 0; B = 0; C = 0; D = 0; s1 = 0; s2 = 1; #10;
A = 0; B = 0; C = 0; D = 0; s1 = 1; s2 = 0; #10;
A = 0; B = 0; C = 0; D = 0; s1 = 1; s2 = 1; #10;
A = 0; B = 0; C = 0; D = 1; s1 = 0; s2 = 0; #10;
A = 0; B = 0; C = 0; D = 1; s1 = 0; s2 = 1; #10;
A = 0; B = 0; C = 0; D = 1; s1 = 1; s2 = 0; #10;
A = 0; B = 0; C = 0; D = 1; s1 = 1; s2 = 1; #10;
A = 0; B = 0; C = 1; D = 0; s1 = 0; s2 = 0; #10;
A = 0; B = 0; C = 1; D = 0; s1 = 0; s2 = 1; #10;
A = 0; B = 0; C = 1; D = 0; s1 = 1; s2 = 0; #10;
A = 0; B = 0; C = 1; D = 0; s1 = 1; s2 = 1; #10;
A = 0; B = 0; C = 1; D = 1; s1 = 0; s2 = 0; #10;
A = 0; B = 0; C = 1; D = 1; s1 = 0; s2 = 1; #10;
A = 0; B = 0; C = 1; D = 1; s1 = 1; s2 = 0; #10;
A = 0; B = 0; C = 1; D = 1; s1 = 1; s2 = 1; #10;
A = 0; B = 1; C = 0; D = 0; s1 = 0; s2 = 0; #10;
A = 0; B = 1; C = 0; D = 0; s1 = 0; s2 = 1; #10;
A = 0; B = 1; C = 0; D = 0; s1 = 1; s2 = 0; #10;
A = 0; B = 1; C = 0; D = 0; s1 = 1; s2 = 1; #10;
A = 0; B = 1; C = 0; D = 1; s1 = 0; s2 = 0; #10;
A = 0; B = 1; C = 0; D = 1; s1 = 0; s2 = 1; #10;
A = 0; B = 1; C = 0; D = 1; s1 = 1; s2 = 0; #10;
A = 0; B = 1; C = 0; D = 1; s1 = 1; s2 = 1; #10;
A = 0; B = 1; C = 1; D = 0; s1 = 0; s2 = 0; #10;
A = 0; B = 1; C = 1; D = 0; s1 = 0; s2 = 1; #10;
A = 0; B = 1; C = 1; D = 0; s1 = 1; s2 = 0; #10;
A = 0; B = 1; C = 1; D = 0; s1 = 1; s2 = 1; #10;
A = 0; B = 1; C = 1; D = 1; s1 = 0; s2 = 0; #10;
A = 0; B = 1; C = 1; D = 1; s1 = 0; s2 = 1; #10;
A = 0; B = 1; C = 1; D = 1; s1 = 1; s2 = 0; #10;
A = 0; B = 1; C = 1; D = 1; s1 = 1; s2 = 1; #10;
#20;

A = 1; B = 0; C = 0; D = 0; s1 = 0; s2 = 0; #10;
A = 1; B = 0; C = 0; D = 0; s1 = 0; s2 = 1; #10;
A = 1; B = 0; C = 0; D = 0; s1 = 1; s2 = 0; #10;
A = 1; B = 0; C = 0; D = 0; s1 = 1; s2 = 1; #10;
A = 1; B = 0; C = 0; D = 1; s1 = 0; s2 = 0; #10;
A = 1; B = 0; C = 0; D = 1; s1 = 0; s2 = 1; #10;
A = 1; B = 0; C = 0; D = 1; s1 = 1; s2 = 0; #10;
A = 1; B = 0; C = 0; D = 1; s1 = 1; s2 = 1; #10;
A = 1; B = 0; C = 1; D = 0; s1 = 0; s2 = 0; #10;
A = 1; B = 0; C = 1; D = 0; s1 = 0; s2 = 1; #10;
A = 1; B = 0; C = 1; D = 0; s1 = 1; s2 = 0; #10;
A = 1; B = 0; C = 1; D = 0; s1 = 1; s2 = 1; #10;
A = 1; B = 0; C = 1; D = 1; s1 = 0; s2 = 0; #10;
A = 1; B = 0; C = 1; D = 1; s1 = 0; s2 = 1; #10;
A = 1; B = 0; C = 1; D = 1; s1 = 1; s2 = 0; #10;
A = 1; B = 0; C = 1; D = 1; s1 = 1; s2 = 1; #10;
A = 1; B = 1; C = 0; D = 0; s1 = 0; s2 = 0; #10;
A = 1; B = 1; C = 0; D = 0; s1 = 0; s2 = 1; #10;
A = 1; B = 1; C = 0; D = 0; s1 = 1; s2 = 0; #10;
A = 1; B = 1; C = 0; D = 0; s1 = 1; s2 = 1; #10;
A = 1; B = 1; C = 0; D = 1; s1 = 0; s2 = 0; #10;
A = 1; B = 1; C = 0; D = 1; s1 = 0; s2 = 1; #10;
A = 1; B = 1; C = 0; D = 1; s1 = 1; s2 = 0; #10;
A = 1; B = 1; C = 0; D = 1; s1 = 1; s2 = 1; #10;
A = 1; B = 1; C = 1; D = 0; s1 = 0; s2 = 0; #10;
A = 1; B = 1; C = 1; D = 0; s1 = 0; s2 = 1; #10;
A = 1; B = 1; C = 1; D = 0; s1 = 1; s2 = 0; #10;
A = 1; B = 1; C = 1; D = 0; s1 = 1; s2 = 1; #10;
A = 1; B = 1; C = 1; D = 1; s1 = 0; s2 = 0; #10;
A = 1; B = 1; C = 1; D = 1; s1 = 0; s2 = 1; #10;
A = 1; B = 1; C = 1; D = 1; s1 = 1; s2 = 0; #10;
A = 1; B = 1; C = 1; D = 1; s1 = 1; s2 = 1; #10;
$finish;
end
endmodule

module mux8_1_tb();
logic D, E, F, G, K, L, M, N, s1, s2, s3;
wire result;

mux8_1 muxtest(D, E, F, G, K, L, M, N, s1, s2, s3, result);
 
 initial begin
 D = 0; E = 0; F = 0; G = 0; K = 0; L = 0; M = 0;
N = 0; s1 = 0; s2= 0; s3 = 0; #10;
 D = 1; E = 0; F = 0; G = 0; K = 0; L = 0; M = 0;
N = 0; s1 = 0; s2= 0; s3 = 0; #10;
 D = 0; E = 1; F = 0; G = 0; K = 0; L = 0; M = 0;
N = 0; s1 = 1; s2= 0; s3 = 0; #10;
 D = 0; E = 0; F = 1; G = 0; K = 0; L = 0; M = 0;
N = 0; s1 = 0; s2= 1; s3 = 0; #10;
 D = 0; E = 0; F = 0; G = 1; K = 0; L = 0; M = 0;
N = 0; s1 = 1; s2= 1; s3 = 0; #10;
 D = 0; E = 0; F = 0; G = 0; K = 1; L = 0; M = 0;
N = 0; s1 = 0; s2= 0; s3 = 1; #10;
 D = 0; E = 0; F = 0; G = 0; K = 0; L = 1; M = 0;
N = 0; s1 = 1; s2= 0; s3 = 1; #10;
 D = 0; E = 0; F = 0; G = 0; K = 0; L = 0; M = 1;
N = 0; s1 = 0; s2= 1; s3 = 1; #10;
 D = 0; E = 0; F = 0; G = 0; K = 0; L = 0; M = 0;
N = 1; s1 = 1; s2= 1; s3 = 1; #10;
$finish;
 end
endmodule

module decoder2_4_tb();
reg i0, i1;
wire m0, m1, m2, m3;
decoder2_4 d2(i0, i1, m0, m1, m2, m3);
initial begin
i0 = 0; i1 = 0; #10;
i0 = 0; i1 = 1; #10;
i0 = 1; i1 = 0; #10;
i0 = 1; i1 = 1; #10;
$finish;
end
endmodule

module option_f_tb();
reg A, B, s1, s2, s3;
wire result;

option_f o1(A, B, s1, s2, s3, result);

initial begin
 A = 0; B = 0; s1 = 0; s2 = 0; s3 = 0; #10;
 A = 0; B = 0; s1 = 0; s2 = 0; s3 = 1; #10;
 A = 0; B = 0; s1 = 0; s2 = 1; s3 = 0; #10;
 A = 0; B = 0; s1 = 0; s2 = 1; s3 = 1; #10;
 A = 0; B = 0; s1 = 1; s2 = 0; s3 = 0; #10;
 A = 0; B = 0; s1 = 1; s2 = 0; s3 = 1; #10;
 A = 0; B = 0; s1 = 1; s2 = 1; s3 = 0; #10;
 A = 0; B = 0; s1 = 1; s2 = 1; s3 = 1; #10;
 A = 0; B = 1; s1 = 0; s2 = 0; s3 = 0; #10;
 A = 0; B = 1; s1 = 0; s2 = 0; s3 = 1; #10;
 A = 0; B = 1; s1 = 0; s2 = 1; s3 = 0; #10;
 A = 0; B = 1; s1 = 0; s2 = 1; s3 = 1; #10;
 A = 0; B = 1; s1 = 1; s2 = 0; s3 = 0; #10;
 A = 0; B = 1; s1 = 1; s2 = 0; s3 = 1; #10;
 A = 0; B = 1; s1 = 1; s2 = 1; s3 = 0; #10;
 A = 0; B = 1; s1 = 1; s2 = 1; s3 = 1; #10;
 A = 1; B = 0; s1 = 0; s2 = 0; s3 = 0; #10;
 A = 1; B = 0; s1 = 0; s2 = 0; s3 = 1; #10;
 A = 1; B = 0; s1 = 0; s2 = 1; s3 = 0; #10;
 A = 1; B = 0; s1 = 0; s2 = 1; s3 = 1; #10;
 A = 1; B = 0; s1 = 1; s2 = 0; s3 = 0; #10;
 A = 1; B = 0; s1 = 1; s2 = 0; s3 = 1; #10;
 A = 1; B = 0; s1 = 1; s2 = 1; s3 = 0; #10;
 A = 1; B = 0; s1 = 1; s2 = 1; s3 = 1; #10;
 A = 1; B = 1; s1 = 0; s2 = 0; s3 = 0; #10;
 A = 1; B = 1; s1 = 0; s2 = 0; s3 = 1; #10;
 A = 1; B = 1; s1 = 0; s2 = 1; s3 = 0; #10;
 A = 1; B = 1; s1 = 0; s2 = 1; s3 = 1; #10;
 A = 1; B = 1; s1 = 1; s2 = 0; s3 = 0; #10;
 A = 1; B = 1; s1 = 1; s2 = 0; s3 = 1; #10;
 A = 1; B = 1; s1 = 1; s2 = 1; s3 = 0; #10;
 A = 1; B = 1; s1 = 1; s2 = 1; s3 = 1; #10;

$finish;
end
endmodule


module basysDecoder2_4_tb();
reg sw[1:0];
wire led[3:0];
basysDecoder2_4 basysD(.sw(sw), .led(led));
initial begin
sw[0] = 0; sw[1] = 0; #10;
sw[0] = 0; sw[1] = 1; #10;
sw[0] = 1; sw[1] = 0; #10;
sw[0] = 1; sw[1] = 1; #10;
$finish;
end
endmodule

module BasysOption_f_tb();
reg sw[4:0];
wire led[0:0];

basysOption_f o1(.sw(sw), .led(led));

initial begin
 sw[0] = 0; sw[1] = 0; sw[2] = 0; sw[3] = 0; sw[4] = 0; #10;
 sw[0] = 0; sw[1] = 0; sw[2] = 0; sw[3] = 0; sw[4] = 1; #10;
 sw[0] = 0; sw[1] = 0; sw[2] = 0; sw[3] = 1; sw[4] = 0; #10;
 sw[0] = 0; sw[1] = 0; sw[2] = 0; sw[3] = 1; sw[4] = 1; #10;
 sw[0] = 0; sw[1] = 0; sw[2] = 1; sw[3] = 0; sw[4] = 0; #10;
 sw[0] = 0; sw[1] = 0; sw[2] = 1; sw[3] = 0; sw[4] = 1; #10;
 sw[0] = 0; sw[1] = 0; sw[2] = 1; sw[3] = 1; sw[4] = 0; #10;
 sw[0] = 0; sw[1] = 0; sw[2] = 1; sw[3] = 1; sw[4] = 1; #10;
 sw[0] = 0; sw[1] = 1; sw[2] = 0; sw[3] = 0; sw[4] = 0; #10;
 sw[0] = 0; sw[1] = 1; sw[2] = 0; sw[3] = 0; sw[4] = 1; #10;
 sw[0] = 0; sw[1] = 1; sw[2] = 0; sw[3] = 1; sw[4] = 0; #10;
 sw[0] = 0; sw[1] = 1; sw[2] = 0; sw[3] = 1; sw[4] = 1; #10;
 sw[0] = 0; sw[1] = 1; sw[2] = 1; sw[3] = 0; sw[4] = 0; #10;
 sw[0] = 0; sw[1] = 1; sw[2] = 1; sw[3] = 0; sw[4] = 1; #10;
 sw[0] = 0; sw[1] = 1; sw[2] = 1; sw[3] = 1; sw[4] = 0; #10;
 sw[0] = 0; sw[1] = 1; sw[2] = 1; sw[3] = 1; sw[4] = 1; #10;
 sw[0] = 1; sw[1] = 0; sw[2] = 0; sw[3] = 0; sw[4] = 0; #10;
 sw[0] = 1; sw[1] = 0; sw[2] = 0; sw[3] = 0; sw[4] = 1; #10;
 sw[0] = 1; sw[1] = 0; sw[2] = 0; sw[3] = 1; sw[4] = 0; #10;
 sw[0] = 1; sw[1] = 0; sw[2] = 0; sw[3] = 1; sw[4] = 1; #10;
 sw[0] = 1; sw[1] = 0; sw[2] = 1; sw[3] = 0; sw[4] = 0; #10;
 sw[0] = 1; sw[1] = 0; sw[2] = 1; sw[3] = 0; sw[4] = 1; #10;
 sw[0] = 1; sw[1] = 0; sw[2] = 1; sw[3] = 1; sw[4] = 0; #10;
 sw[0] = 1; sw[1] = 0; sw[2] = 1; sw[3] = 1; sw[4] = 1; #10;
 sw[0] = 1; sw[1] = 1; sw[2] = 0; sw[3] = 0; sw[4] = 0; #10;
 sw[0] = 1; sw[1] = 1; sw[2] = 0; sw[3] = 0; sw[4] = 1; #10;
 sw[0] = 1; sw[1] = 1; sw[2] = 0; sw[3] = 1; sw[4] = 0; #10;
 sw[0] = 1; sw[1] = 1; sw[2] = 0; sw[3] = 1; sw[4] = 1; #10;
 sw[0] = 1; sw[1] = 1; sw[2] = 1; sw[3] = 0; sw[4] = 0; #10;
 sw[0] = 1; sw[1] = 1; sw[2] = 1; sw[3] = 0; sw[4] = 1; #10;
 sw[0] = 1; sw[1] = 1; sw[2] = 1; sw[3] = 1; sw[4] = 0; #10;
 sw[0] = 1; sw[1] = 1; sw[2] = 1; sw[3] = 1; sw[4] = 1; #10;

$finish;
end
endmodule



set_property PACKAGE_PIN V17 [get_ports {sw[0]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {sw[0]}] 
set_property PACKAGE_PIN V16 [get_ports {sw[1]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {sw[1]}] 
set_property PACKAGE_PIN W16 [get_ports {sw[2]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {sw[2]}] 
set_property PACKAGE_PIN W17 [get_ports {sw[3]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {sw[3]}] 
set_property PACKAGE_PIN W15 [get_ports {sw[4]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {sw[4]}] 


set_property PACKAGE_PIN U16 [get_ports {led[0]}]  	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {led[0]}] 
set_property PACKAGE_PIN E19 [get_ports {led[1]}]  	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {led[1]}] 
set_property PACKAGE_PIN U19 [get_ports {led[2]}]  	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {led[2]}] 
set_property PACKAGE_PIN V19 [get_ports {led[3]}]  	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {led[3]}] 